const https = require('https');
const querystring = require('querystring');


/**
 * HTTPS configuration constants
 */
const host = 'prd-xereg.temple.edu';
const basePath = '/StudentRegistrationSsb/ssb';

const INSTR_MAX = 4000;

/**
 * @class Class to interact with the SSB Server
 */
class Banner {
    constructor(){
        this.SessionId = Date.now();
    }

    async build(term){
        if (arguments.length < 1){
            throw new Error('Must provide term to complete object construction');
        }
        await this._init(term);
        return this;
    }

    async _init(term){
        const data = querystring.stringify({
            'uniqueSessionId': this.SessionId,
            'term': term
        });

        const options = {
            method: 'POST',
            hostname: 'prd-xereg.temple.edu',
            path: basePath + '/term/search',
            port: 443,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'      
            }
        };
        let res = await promiseRequest(options, data);
        this.Cookie = res.cookie;
        this.Term = term;
    }

    async getTerms(){
        const path = '/classSearch/getTerms';
        const params = querystring.stringify({
            offset: 0,
            max: -1
        });
        const options = {
            method: 'GET',
            hostname: 'prd-xereg.temple.edu',
            path: `${basePath}${path}?${params}`,
            port: 443
        };
            
        let res = await promiseRequest(options);
        return res.data;
    }

    async getSubjects(){
        const path = '/classSearch/get_subject';
        const params = querystring.stringify({
            offset: 0,
            max: -1,
            term: this.Term
        });
        const options = {
            method: 'GET',
            hostname: 'prd-xereg.temple.edu',
            path: `${basePath}${path}?${params}`,
            port: 443
        };
            
        let res = await promiseRequest(options);
        return res.data;
    }

    async getInstructors(){
        const path = '/classSearch/get_instructor';
        const params = querystring.stringify({
            offset: 0,
            max: INSTR_MAX,
            term: this.Term
        });
        const options = {
            method: 'GET',
            hostname: 'prd-xereg.temple.edu',
            path: `${basePath}${path}?${params}`,
            port: 443
        };
            
        let res = await promiseRequest(options);
        return res.data;
    }

    async getCampus(){
        const path = '/classSearch/get_campus';
        const params = querystring.stringify({
            offset: 0,
            max: -1
        });
        const options = {
            method: 'GET',
            hostname: 'prd-xereg.temple.edu',
            path: `${basePath}${path}?${params}`,
            port: 443
        };
            
        let res = await promiseRequest(options);
        return res.data;
    }

    async getColleges(){
        const path = '/classSearch/get_college';
        const params = querystring.stringify({
            offset: 0,
            max: -1
        });
        const options = {
            method: 'GET',
            hostname: 'prd-xereg.temple.edu',
            path: `${basePath}${path}?${params}`,
            port: 443
        };
            
        let res = await promiseRequest(options);
        return res.data;
    }

    async getAttributes(){
        const path = '/classSearch/get_attribute';
        const params = querystring.stringify({
            offset: 0,
            max: -1
        });
        const options = {
            method: 'GET',
            hostname: 'prd-xereg.temple.edu',
            path: `${basePath}${path}?${params}`,
            port: 443
        };
            
        let res = await promiseRequest(options);
        return res.data;
    }

    async classSearch(subjects, openOnly=false){
        if (arguments.length < 1){
            throw new Error('Must provide subject(s)');
        }

    }
}

/**
 * Promise wrapper for HTTPS.request
 * @param {HttpOptions} options 
 * @param {Object} data 
 */
async function promiseRequest(options, data=null){
    return new Promise((resolve, reject) => {
        const req = https.request(options, (res) => {
            let body = '';
            res.on('data', (d) => body += d);
            res.on('error', (err) => reject(err));
            res.on('end', () => resolve({
                'statusCode': res.statusCode,
                'cookie': res.headers['set-cookie'],
                'data': JSON.parse(body)
            }));
        });

        req.on('error', (err) => reject(err));
        if (options.method == 'POST'){
            req.write(data);
        }
        req.end();
    });
}

module.exports = Banner;