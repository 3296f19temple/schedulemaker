'use strict';

/**
 * @module
 * This module facilitates the conversion between the different data models present in the application
 */
module.exports = {
    BannerToDB: function(sections){
        return sections.map(section => {
            return {
                'crn': Number(section.courseReferenceNumber),
                'title': section.courseTitle,
                'currentSeats': section.enrollment,
                'totalSeats': section.maximumEnrollment,
                'currentWaitlist': section.waitCount,
                'totalWaitlist': section.waitCapacity,
                'isOpen': section.openSection,
                'section': section.sequenceNumber,
                'courseName': `${section.subject} ${section.courseNumber}`,
                'campus': getCampus(section),
                'professor': getInstructor(section),
                'classTimes': getClasstimes(section)
            }
        });

        function getClasstimes(section){
            let meetingTimes = section.meetingsFaculty.map(obj => obj.meetingTime);
            return meetingTimes.map(mt => convertMeetingTime(mt))
                               .reduce((acc, val) => acc.concat(val), []);
        }

        function convertMeetingTime(meetingTime){
            return getDays(meetingTime).map(day => {
                return {
                    'building': meetingTime.building,
                    'startTime': Number(meetingTime.beginTime),
                    'endTime': Number(meetingTime.endTime),
                    'type': meetingTime.meetingType,
                    'roomNumber': meetingTime.room,
                    'day': day
                };
            });
        }

        function getCampus(section){
            return section.meetingsFaculty.length > 0 ?
                    section.meetingsFaculty[0].meetingTime.campus :
                    null;
        }

        function getInstructor(section){
            return section.faculty.length > 0 ?
                        section.faculty.find(f => f.primaryIndicator).displayName :
                        null;
        }

        /**
         * Extracts an array of days from the meeting time
         * @param {meetingTime} meetingTime 
         */
        function getDays(meetingTime){
            const dayMap = {
                'monday': 'M',
                'tuesday': 'T',
                'wednesday': 'W',
                'thursday': 'R',
                'friday': 'F',
                'saturday': 'S',
                'sunday': 'U'
             };
            return Object.keys(dayMap)
                .filter(key => meetingTime[key])
                .map(key => dayMap[key]);
        }
    },
    
    DBToScheduler: function(data){
        return data.map(obj => obj.Items);
    },

    SchedulerToUI: function(schedules){
        return schedules.map(schedule => schedule
            .map(section => convertSection(section)
                .reduce((acc, val) => acc.concat(val), [])));

        function convertSection(section){
            return section.classTimes.map(classTime => {
                return  {
                    "day": classTime.day,
                    "startTime": classTime.startTime,
                    "endTime": classTime.endTime,
                    "enrollment": {
                        "full": section.currentSeats,
                        "total": section.totalSeats
                    },
                    "professor": section.professor,
                    "location": {
                        "building": classTime.building,
                        "room": classTime.roomNumber
                    },
                    "course": {
                        "name": section.courseName,
                        "title": section.title
                    },
                    "sectionNum": section.section,
                    "crn": section.crn,
                    "campus": section.campus
                }
            });
        }
    }

}
