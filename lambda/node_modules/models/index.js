

/**
 * @module
 * This module facilitates the conversion between the different data models present in the application
 */
module.exports = {
    BannerToDB: {

        /**
         * Converts the data returned by Banner.ClassSearch() to the database model
         * @param {BannerResponse} response 
         */
        convert: function(sections){
            return sections.map(section => {
                return {
                    'crn': Number(section.courseReferenceNumber),
                    'title': section.courseTitle,
                    'currentSeats': section.enrollment,
                    'totalSeats': section.maximumEnrollment,
                    'currentWaitlist': section.waitCount,
                    'totalWaitlist': section.waitCapacity,
                    'isOpen': section.openSection,
                    'section': Number(section.sequenceNumber),
                    'courseName': `${section.subject} ${section.courseNumber}`,
                    'campus': section.meetingsFaculty.length > 0 ?
                                section.meetingsFaculty[0].meetingTime.campus :
                                null,
                    'professor': this._getInstructor(section),
                    'classTimes': this._getClasstimes(section)
                }
            });
        },

        _getClasstimes: function(section){
            let meetingTimes = section.meetingsFaculty.map(obj => obj.meetingTime);
            return meetingTimes.map(mt => this._convertMeetingTime(mt))
                               .reduce((acc, val) => acc.concat(val), []);
        },

        _convertMeetingTime(meetingTime){
            return this._getDays(meetingTime).map(day => {
                return {
                    'building': meetingTime.building,
                    'startTime': Number(meetingTime.beginTime),
                    'endTime': Number(meetingTime.endTime),
                    'type': meetingTime.meetingType,
                    'roomNumber': meetingTime.room,
                    'day': day
                };
            });
        },

        /**
         * Gets the name of the professor for the section
         * @param {BannerSection} section 
         */
        _getInstructor: function(section){
            return section.faculty.length > 0 ?
                section.faculty.find(f => f.primaryIndicator).displayName :
                null;
        },

        /**
         * Extracts an array of days from the meeting time
         * @param {meetingTime} meetingTime 
         */
        _getDays: function(meetingTime){
            const dayMap = {
                'monday': 'M',
                'tuesday': 'T',
                'wednesday': 'W',
                'thursday': 'R',
                'friday': 'F',
                'saturday': 'S',
                'sunday': 'U'
             };
            return Object.keys(dayMap)
                .filter(key => meetingTime[key])
                .map(key => dayMap[key]);
        }
    }

}
